$date
	Sun Oct 26 23:15:53 2025
$end
$version
	ModelSim Version 2020.1
$end
$timescale
	1ps
$end

$scope module top $end
$var wire 1 ! clock $end
$var wire 1 " reset $end

$scope module clkg $end
$var reg 1 # clk $end
$var reg 1 $ rst $end
$var integer 32 % counter $end
$upscope $end

$scope module dut $end
$var wire 1 ! clk $end
$var wire 1 " reset $end

$scope module core $end
$var parameter 32 & AWIDTH $end
$var parameter 32 ' DWIDTH $end
$var parameter 32 ( DMEM_WORDS $end
$var parameter 32 ) DMEM_ADDR_BITS $end
$var parameter 32 * DMEM_BASE_ADDR $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var reg 32 + if_pc [31:0] $end
$var reg 32 , if_insn [31:0] $end
$var reg 32 - id_pc [31:0] $end
$var reg 32 . id_insn [31:0] $end
$var reg 7 / id_opcode [6:0] $end
$var reg 5 0 id_rd [4:0] $end
$var reg 5 1 id_rs1 [4:0] $end
$var reg 5 2 id_rs2 [4:0] $end
$var reg 7 3 id_funct7 [6:0] $end
$var reg 3 4 id_funct3 [2:0] $end
$var reg 5 5 id_shamt [4:0] $end
$var reg 32 6 id_imm [31:0] $end
$var reg 1 7 id_pcsel $end
$var reg 1 8 id_immsel $end
$var reg 1 9 id_regwren $end
$var reg 1 : id_rs1sel $end
$var reg 1 ; id_rs2sel $end
$var reg 1 < id_memren $end
$var reg 1 = id_memwren $end
$var reg 2 > id_wbsel [1:0] $end
$var reg 4 ? id_alusel [3:0] $end
$var reg 1 @ rf_wren $end
$var reg 5 A rf_rd_addr [4:0] $end
$var reg 5 B rf_rs1_addr [4:0] $end
$var reg 5 C rf_rs2_addr [4:0] $end
$var reg 32 D rf_rs1_data [31:0] $end
$var reg 32 E rf_rs2_data [31:0] $end
$var reg 32 F wb_data [31:0] $end
$var reg 32 G ex_alu_res [31:0] $end
$var reg 1 H ex_br_taken $end
$var reg 32 I imem_addr [31:0] $end
$var reg 32 J imem_rdata [31:0] $end
$var reg 32 K imem_wdata [31:0] $end
$var reg 1 L imem_read_en $end
$var reg 1 M imem_write_en $end
$var reg 32 N dmem_addr [31:0] $end
$var reg 32 O dmem_rdata [31:0] $end
$var reg 32 P dmem_wdata [31:0] $end
$var reg 1 Q dmem_read_en $end
$var reg 1 R dmem_write_en $end
$var reg 32 S dmem_offset [31:0] $end
$var reg 32 T branch_target [31:0] $end
$var reg 1 U pcsel_taken $end
$var reg 32 V id_pc_plus4_aw [31:0] $end
$var reg 32 W id_pc_plus4_dw [31:0] $end
$var reg 7 X dmem_index [6:0] $end
$var reg 4 Y 0 [3:0] $end

$scope module u_fetch $end
$var parameter 32 Z DWIDTH $end
$var parameter 32 [ AWIDTH $end
$var parameter 32 \ RESET_PC $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 ] pcsel_i $end
$var wire 1 ^ pc_branch_i [31] $end
$var wire 1 _ pc_branch_i [30] $end
$var wire 1 ` pc_branch_i [29] $end
$var wire 1 a pc_branch_i [28] $end
$var wire 1 b pc_branch_i [27] $end
$var wire 1 c pc_branch_i [26] $end
$var wire 1 d pc_branch_i [25] $end
$var wire 1 e pc_branch_i [24] $end
$var wire 1 f pc_branch_i [23] $end
$var wire 1 g pc_branch_i [22] $end
$var wire 1 h pc_branch_i [21] $end
$var wire 1 i pc_branch_i [20] $end
$var wire 1 j pc_branch_i [19] $end
$var wire 1 k pc_branch_i [18] $end
$var wire 1 l pc_branch_i [17] $end
$var wire 1 m pc_branch_i [16] $end
$var wire 1 n pc_branch_i [15] $end
$var wire 1 o pc_branch_i [14] $end
$var wire 1 p pc_branch_i [13] $end
$var wire 1 q pc_branch_i [12] $end
$var wire 1 r pc_branch_i [11] $end
$var wire 1 s pc_branch_i [10] $end
$var wire 1 t pc_branch_i [9] $end
$var wire 1 u pc_branch_i [8] $end
$var wire 1 v pc_branch_i [7] $end
$var wire 1 w pc_branch_i [6] $end
$var wire 1 x pc_branch_i [5] $end
$var wire 1 y pc_branch_i [4] $end
$var wire 1 z pc_branch_i [3] $end
$var wire 1 { pc_branch_i [2] $end
$var wire 1 | pc_branch_i [1] $end
$var wire 1 } pc_branch_i [0] $end
$var reg 32 ~ pc_o [31:0] $end
$var reg 32 !! insn_o [31:0] $end
$var reg 32 "! pc_d [31:0] $end
$var reg 32 #! pc_q [31:0] $end
$upscope $end

$scope module u_imem $end
$var parameter 32 $! AWIDTH $end
$var parameter 32 %! DWIDTH $end
$var parameter 32 &! IMEM_BASE_ADDR $end
$var parameter 32 '! MEM_BYTES $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 (! addr_i [31] $end
$var wire 1 )! addr_i [30] $end
$var wire 1 *! addr_i [29] $end
$var wire 1 +! addr_i [28] $end
$var wire 1 ,! addr_i [27] $end
$var wire 1 -! addr_i [26] $end
$var wire 1 .! addr_i [25] $end
$var wire 1 /! addr_i [24] $end
$var wire 1 0! addr_i [23] $end
$var wire 1 1! addr_i [22] $end
$var wire 1 2! addr_i [21] $end
$var wire 1 3! addr_i [20] $end
$var wire 1 4! addr_i [19] $end
$var wire 1 5! addr_i [18] $end
$var wire 1 6! addr_i [17] $end
$var wire 1 7! addr_i [16] $end
$var wire 1 8! addr_i [15] $end
$var wire 1 9! addr_i [14] $end
$var wire 1 :! addr_i [13] $end
$var wire 1 ;! addr_i [12] $end
$var wire 1 <! addr_i [11] $end
$var wire 1 =! addr_i [10] $end
$var wire 1 >! addr_i [9] $end
$var wire 1 ?! addr_i [8] $end
$var wire 1 @! addr_i [7] $end
$var wire 1 A! addr_i [6] $end
$var wire 1 B! addr_i [5] $end
$var wire 1 C! addr_i [4] $end
$var wire 1 D! addr_i [3] $end
$var wire 1 E! addr_i [2] $end
$var wire 1 F! addr_i [1] $end
$var wire 1 G! addr_i [0] $end
$var wire 1 H! data_i [31] $end
$var wire 1 I! data_i [30] $end
$var wire 1 J! data_i [29] $end
$var wire 1 K! data_i [28] $end
$var wire 1 L! data_i [27] $end
$var wire 1 M! data_i [26] $end
$var wire 1 N! data_i [25] $end
$var wire 1 O! data_i [24] $end
$var wire 1 P! data_i [23] $end
$var wire 1 Q! data_i [22] $end
$var wire 1 R! data_i [21] $end
$var wire 1 S! data_i [20] $end
$var wire 1 T! data_i [19] $end
$var wire 1 U! data_i [18] $end
$var wire 1 V! data_i [17] $end
$var wire 1 W! data_i [16] $end
$var wire 1 X! data_i [15] $end
$var wire 1 Y! data_i [14] $end
$var wire 1 Z! data_i [13] $end
$var wire 1 [! data_i [12] $end
$var wire 1 \! data_i [11] $end
$var wire 1 ]! data_i [10] $end
$var wire 1 ^! data_i [9] $end
$var wire 1 _! data_i [8] $end
$var wire 1 `! data_i [7] $end
$var wire 1 a! data_i [6] $end
$var wire 1 b! data_i [5] $end
$var wire 1 c! data_i [4] $end
$var wire 1 d! data_i [3] $end
$var wire 1 e! data_i [2] $end
$var wire 1 f! data_i [1] $end
$var wire 1 g! data_i [0] $end
$var wire 1 h! read_en_i $end
$var wire 1 i! write_en_i $end
$var reg 32 j! data_o [31:0] $end
$var reg 32 k! address [31:0] $end
$var integer 32 l! i $end
$upscope $end

$scope module u_decode $end
$var parameter 32 m! DWIDTH $end
$var parameter 32 n! AWIDTH $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 o! insn_i [31] $end
$var wire 1 p! insn_i [30] $end
$var wire 1 q! insn_i [29] $end
$var wire 1 r! insn_i [28] $end
$var wire 1 s! insn_i [27] $end
$var wire 1 t! insn_i [26] $end
$var wire 1 u! insn_i [25] $end
$var wire 1 v! insn_i [24] $end
$var wire 1 w! insn_i [23] $end
$var wire 1 x! insn_i [22] $end
$var wire 1 y! insn_i [21] $end
$var wire 1 z! insn_i [20] $end
$var wire 1 {! insn_i [19] $end
$var wire 1 |! insn_i [18] $end
$var wire 1 }! insn_i [17] $end
$var wire 1 ~! insn_i [16] $end
$var wire 1 !" insn_i [15] $end
$var wire 1 "" insn_i [14] $end
$var wire 1 #" insn_i [13] $end
$var wire 1 $" insn_i [12] $end
$var wire 1 %" insn_i [11] $end
$var wire 1 &" insn_i [10] $end
$var wire 1 '" insn_i [9] $end
$var wire 1 (" insn_i [8] $end
$var wire 1 )" insn_i [7] $end
$var wire 1 *" insn_i [6] $end
$var wire 1 +" insn_i [5] $end
$var wire 1 ," insn_i [4] $end
$var wire 1 -" insn_i [3] $end
$var wire 1 ." insn_i [2] $end
$var wire 1 /" insn_i [1] $end
$var wire 1 0" insn_i [0] $end
$var wire 1 1" pc_i [31] $end
$var wire 1 2" pc_i [30] $end
$var wire 1 3" pc_i [29] $end
$var wire 1 4" pc_i [28] $end
$var wire 1 5" pc_i [27] $end
$var wire 1 6" pc_i [26] $end
$var wire 1 7" pc_i [25] $end
$var wire 1 8" pc_i [24] $end
$var wire 1 9" pc_i [23] $end
$var wire 1 :" pc_i [22] $end
$var wire 1 ;" pc_i [21] $end
$var wire 1 <" pc_i [20] $end
$var wire 1 =" pc_i [19] $end
$var wire 1 >" pc_i [18] $end
$var wire 1 ?" pc_i [17] $end
$var wire 1 @" pc_i [16] $end
$var wire 1 A" pc_i [15] $end
$var wire 1 B" pc_i [14] $end
$var wire 1 C" pc_i [13] $end
$var wire 1 D" pc_i [12] $end
$var wire 1 E" pc_i [11] $end
$var wire 1 F" pc_i [10] $end
$var wire 1 G" pc_i [9] $end
$var wire 1 H" pc_i [8] $end
$var wire 1 I" pc_i [7] $end
$var wire 1 J" pc_i [6] $end
$var wire 1 K" pc_i [5] $end
$var wire 1 L" pc_i [4] $end
$var wire 1 M" pc_i [3] $end
$var wire 1 N" pc_i [2] $end
$var wire 1 O" pc_i [1] $end
$var wire 1 P" pc_i [0] $end
$var reg 32 Q" pc_o [31:0] $end
$var reg 32 R" insn_o [31:0] $end
$var reg 7 S" opcode_o [6:0] $end
$var reg 5 T" rd_o [4:0] $end
$var reg 5 U" rs1_o [4:0] $end
$var reg 5 V" rs2_o [4:0] $end
$var reg 7 W" funct7_o [6:0] $end
$var reg 3 X" funct3_o [2:0] $end
$var reg 5 Y" shamt_o [4:0] $end
$var reg 32 Z" imm_o [31:0] $end
$var reg 32 [" pc_q [31:0] $end
$var reg 32 \" insn_q [31:0] $end
$var reg 32 ]" imm_q [31:0] $end

$scope module u_igen $end
$var parameter 32 ^" DWIDTH $end
$var parameter 32 _" ZERO $end
$var parameter 32 `" INSN_NOP $end
$var parameter 32 a" IMEM_BASE_ADDR $end
$var parameter 32 b" STACK_POINTER_INIT $end
$var parameter 7 c" OPCODE_OP $end
$var parameter 7 d" OPCODE_OP_IMM $end
$var parameter 7 e" OPCODE_LOAD $end
$var parameter 7 f" OPCODE_STORE $end
$var parameter 7 g" OPCODE_BRANCH $end
$var parameter 7 h" OPCODE_JALR $end
$var parameter 7 i" OPCODE_JAL $end
$var parameter 7 j" OPCODE_LUI $end
$var parameter 7 k" OPCODE_AUIPC $end
$var parameter 7 l" OPCODE_SYSTEM $end
$var parameter 7 m" OPCODE_MISC_MEM $end
$var parameter 3 n" FUNCT3_ADD_SUB $end
$var parameter 3 o" FUNCT3_SLL $end
$var parameter 3 p" FUNCT3_SLT $end
$var parameter 3 q" FUNCT3_SLTU $end
$var parameter 3 r" FUNCT3_XOR $end
$var parameter 3 s" FUNCT3_SR $end
$var parameter 3 t" FUNCT3_OR $end
$var parameter 3 u" FUNCT3_AND $end
$var parameter 4 v" ALU_OP_ADD $end
$var parameter 4 w" ALU_OP_SUB $end
$var parameter 4 x" ALU_OP_SLL $end
$var parameter 4 y" ALU_OP_SLT $end
$var parameter 4 z" ALU_OP_SLTU $end
$var parameter 4 {" ALU_OP_XOR $end
$var parameter 4 |" ALU_OP_SRL $end
$var parameter 4 }" ALU_OP_SRA $end
$var parameter 4 ~" ALU_OP_OR $end
$var parameter 4 !# ALU_OP_AND $end
$var parameter 4 "# ALU_OP_COPY_B $end
$var parameter 2 ## WBSEL_ALU $end
$var parameter 2 $# WBSEL_MEM $end
$var parameter 2 %# WBSEL_PC4 $end
$var parameter 2 &# WBSEL_IMM $end
$var parameter 7 '# FUNCT7_DEFAULT $end
$var parameter 7 (# FUNCT7_SUB_SRA $end
$var wire 1 )# opcode_i [6] $end
$var wire 1 *# opcode_i [5] $end
$var wire 1 +# opcode_i [4] $end
$var wire 1 ,# opcode_i [3] $end
$var wire 1 -# opcode_i [2] $end
$var wire 1 .# opcode_i [1] $end
$var wire 1 /# opcode_i [0] $end
$var wire 1 0# insn_i [31] $end
$var wire 1 1# insn_i [30] $end
$var wire 1 2# insn_i [29] $end
$var wire 1 3# insn_i [28] $end
$var wire 1 4# insn_i [27] $end
$var wire 1 5# insn_i [26] $end
$var wire 1 6# insn_i [25] $end
$var wire 1 7# insn_i [24] $end
$var wire 1 8# insn_i [23] $end
$var wire 1 9# insn_i [22] $end
$var wire 1 :# insn_i [21] $end
$var wire 1 ;# insn_i [20] $end
$var wire 1 <# insn_i [19] $end
$var wire 1 =# insn_i [18] $end
$var wire 1 ># insn_i [17] $end
$var wire 1 ?# insn_i [16] $end
$var wire 1 @# insn_i [15] $end
$var wire 1 A# insn_i [14] $end
$var wire 1 B# insn_i [13] $end
$var wire 1 C# insn_i [12] $end
$var wire 1 D# insn_i [11] $end
$var wire 1 E# insn_i [10] $end
$var wire 1 F# insn_i [9] $end
$var wire 1 G# insn_i [8] $end
$var wire 1 H# insn_i [7] $end
$var wire 1 I# insn_i [6] $end
$var wire 1 J# insn_i [5] $end
$var wire 1 K# insn_i [4] $end
$var wire 1 L# insn_i [3] $end
$var wire 1 M# insn_i [2] $end
$var wire 1 N# insn_i [1] $end
$var wire 1 O# insn_i [0] $end
$var reg 32 P# imm_o [31:0] $end
$var reg 32 Q# imm_val [31:0] $end
$var reg 5 R# 0 [4:0] $end
$upscope $end
$upscope $end

$scope module u_control $end
$var parameter 32 S# DWIDTH $end
$var parameter 32 T# ZERO $end
$var parameter 32 U# INSN_NOP $end
$var parameter 32 V# IMEM_BASE_ADDR $end
$var parameter 32 W# STACK_POINTER_INIT $end
$var parameter 7 X# OPCODE_OP $end
$var parameter 7 Y# OPCODE_OP_IMM $end
$var parameter 7 Z# OPCODE_LOAD $end
$var parameter 7 [# OPCODE_STORE $end
$var parameter 7 \# OPCODE_BRANCH $end
$var parameter 7 ]# OPCODE_JALR $end
$var parameter 7 ^# OPCODE_JAL $end
$var parameter 7 _# OPCODE_LUI $end
$var parameter 7 `# OPCODE_AUIPC $end
$var parameter 7 a# OPCODE_SYSTEM $end
$var parameter 7 b# OPCODE_MISC_MEM $end
$var parameter 3 c# FUNCT3_ADD_SUB $end
$var parameter 3 d# FUNCT3_SLL $end
$var parameter 3 e# FUNCT3_SLT $end
$var parameter 3 f# FUNCT3_SLTU $end
$var parameter 3 g# FUNCT3_XOR $end
$var parameter 3 h# FUNCT3_SR $end
$var parameter 3 i# FUNCT3_OR $end
$var parameter 3 j# FUNCT3_AND $end
$var parameter 4 k# ALU_OP_ADD $end
$var parameter 4 l# ALU_OP_SUB $end
$var parameter 4 m# ALU_OP_SLL $end
$var parameter 4 n# ALU_OP_SLT $end
$var parameter 4 o# ALU_OP_SLTU $end
$var parameter 4 p# ALU_OP_XOR $end
$var parameter 4 q# ALU_OP_SRL $end
$var parameter 4 r# ALU_OP_SRA $end
$var parameter 4 s# ALU_OP_OR $end
$var parameter 4 t# ALU_OP_AND $end
$var parameter 4 u# ALU_OP_COPY_B $end
$var parameter 2 v# WBSEL_ALU $end
$var parameter 2 w# WBSEL_MEM $end
$var parameter 2 x# WBSEL_PC4 $end
$var parameter 2 y# WBSEL_IMM $end
$var parameter 7 z# FUNCT7_DEFAULT $end
$var parameter 7 {# FUNCT7_SUB_SRA $end
$var wire 1 |# insn_i [31] $end
$var wire 1 }# insn_i [30] $end
$var wire 1 ~# insn_i [29] $end
$var wire 1 !$ insn_i [28] $end
$var wire 1 "$ insn_i [27] $end
$var wire 1 #$ insn_i [26] $end
$var wire 1 $$ insn_i [25] $end
$var wire 1 %$ insn_i [24] $end
$var wire 1 &$ insn_i [23] $end
$var wire 1 '$ insn_i [22] $end
$var wire 1 ($ insn_i [21] $end
$var wire 1 )$ insn_i [20] $end
$var wire 1 *$ insn_i [19] $end
$var wire 1 +$ insn_i [18] $end
$var wire 1 ,$ insn_i [17] $end
$var wire 1 -$ insn_i [16] $end
$var wire 1 .$ insn_i [15] $end
$var wire 1 /$ insn_i [14] $end
$var wire 1 0$ insn_i [13] $end
$var wire 1 1$ insn_i [12] $end
$var wire 1 2$ insn_i [11] $end
$var wire 1 3$ insn_i [10] $end
$var wire 1 4$ insn_i [9] $end
$var wire 1 5$ insn_i [8] $end
$var wire 1 6$ insn_i [7] $end
$var wire 1 7$ insn_i [6] $end
$var wire 1 8$ insn_i [5] $end
$var wire 1 9$ insn_i [4] $end
$var wire 1 :$ insn_i [3] $end
$var wire 1 ;$ insn_i [2] $end
$var wire 1 <$ insn_i [1] $end
$var wire 1 =$ insn_i [0] $end
$var wire 1 >$ opcode_i [6] $end
$var wire 1 ?$ opcode_i [5] $end
$var wire 1 @$ opcode_i [4] $end
$var wire 1 A$ opcode_i [3] $end
$var wire 1 B$ opcode_i [2] $end
$var wire 1 C$ opcode_i [1] $end
$var wire 1 D$ opcode_i [0] $end
$var wire 1 E$ funct7_i [6] $end
$var wire 1 F$ funct7_i [5] $end
$var wire 1 G$ funct7_i [4] $end
$var wire 1 H$ funct7_i [3] $end
$var wire 1 I$ funct7_i [2] $end
$var wire 1 J$ funct7_i [1] $end
$var wire 1 K$ funct7_i [0] $end
$var wire 1 L$ funct3_i [2] $end
$var wire 1 M$ funct3_i [1] $end
$var wire 1 N$ funct3_i [0] $end
$var reg 1 O$ pcsel_o $end
$var reg 1 P$ immsel_o $end
$var reg 1 Q$ regwren_o $end
$var reg 1 R$ rs1sel_o $end
$var reg 1 S$ rs2sel_o $end
$var reg 1 T$ memren_o $end
$var reg 1 U$ memwren_o $end
$var reg 2 V$ wbsel_o [1:0] $end
$var reg 4 W$ alusel_o [3:0] $end
$var reg 7 X$ imm_shamt_funct7 [6:0] $end
$var reg 10 Y$ 2 [9:0] $end
$var reg 8 Z$ 1 [7:0] $end
$var reg 8 [$ 0 [7:0] $end
$upscope $end

$scope module u_register_file $end
$var parameter 32 \$ DWIDTH $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 ]$ rs1_i [4] $end
$var wire 1 ^$ rs1_i [3] $end
$var wire 1 _$ rs1_i [2] $end
$var wire 1 `$ rs1_i [1] $end
$var wire 1 a$ rs1_i [0] $end
$var wire 1 b$ rs2_i [4] $end
$var wire 1 c$ rs2_i [3] $end
$var wire 1 d$ rs2_i [2] $end
$var wire 1 e$ rs2_i [1] $end
$var wire 1 f$ rs2_i [0] $end
$var wire 1 g$ rd_i [4] $end
$var wire 1 h$ rd_i [3] $end
$var wire 1 i$ rd_i [2] $end
$var wire 1 j$ rd_i [1] $end
$var wire 1 k$ rd_i [0] $end
$var wire 1 l$ datawb_i [31] $end
$var wire 1 m$ datawb_i [30] $end
$var wire 1 n$ datawb_i [29] $end
$var wire 1 o$ datawb_i [28] $end
$var wire 1 p$ datawb_i [27] $end
$var wire 1 q$ datawb_i [26] $end
$var wire 1 r$ datawb_i [25] $end
$var wire 1 s$ datawb_i [24] $end
$var wire 1 t$ datawb_i [23] $end
$var wire 1 u$ datawb_i [22] $end
$var wire 1 v$ datawb_i [21] $end
$var wire 1 w$ datawb_i [20] $end
$var wire 1 x$ datawb_i [19] $end
$var wire 1 y$ datawb_i [18] $end
$var wire 1 z$ datawb_i [17] $end
$var wire 1 {$ datawb_i [16] $end
$var wire 1 |$ datawb_i [15] $end
$var wire 1 }$ datawb_i [14] $end
$var wire 1 ~$ datawb_i [13] $end
$var wire 1 !% datawb_i [12] $end
$var wire 1 "% datawb_i [11] $end
$var wire 1 #% datawb_i [10] $end
$var wire 1 $% datawb_i [9] $end
$var wire 1 %% datawb_i [8] $end
$var wire 1 &% datawb_i [7] $end
$var wire 1 '% datawb_i [6] $end
$var wire 1 (% datawb_i [5] $end
$var wire 1 )% datawb_i [4] $end
$var wire 1 *% datawb_i [3] $end
$var wire 1 +% datawb_i [2] $end
$var wire 1 ,% datawb_i [1] $end
$var wire 1 -% datawb_i [0] $end
$var wire 1 .% regwren_i $end
$var reg 32 /% rs1data_o [31:0] $end
$var reg 32 0% rs2data_o [31:0] $end
$upscope $end

$scope module u_dmem $end
$var parameter 32 1% AWIDTH $end
$var parameter 32 2% DWIDTH $end
$var parameter 32 3% IMEM_BASE_ADDR $end
$var parameter 32 4% MEM_BYTES $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 5% addr_i [31] $end
$var wire 1 6% addr_i [30] $end
$var wire 1 7% addr_i [29] $end
$var wire 1 8% addr_i [28] $end
$var wire 1 9% addr_i [27] $end
$var wire 1 :% addr_i [26] $end
$var wire 1 ;% addr_i [25] $end
$var wire 1 <% addr_i [24] $end
$var wire 1 =% addr_i [23] $end
$var wire 1 >% addr_i [22] $end
$var wire 1 ?% addr_i [21] $end
$var wire 1 @% addr_i [20] $end
$var wire 1 A% addr_i [19] $end
$var wire 1 B% addr_i [18] $end
$var wire 1 C% addr_i [17] $end
$var wire 1 D% addr_i [16] $end
$var wire 1 E% addr_i [15] $end
$var wire 1 F% addr_i [14] $end
$var wire 1 G% addr_i [13] $end
$var wire 1 H% addr_i [12] $end
$var wire 1 I% addr_i [11] $end
$var wire 1 J% addr_i [10] $end
$var wire 1 K% addr_i [9] $end
$var wire 1 L% addr_i [8] $end
$var wire 1 M% addr_i [7] $end
$var wire 1 N% addr_i [6] $end
$var wire 1 O% addr_i [5] $end
$var wire 1 P% addr_i [4] $end
$var wire 1 Q% addr_i [3] $end
$var wire 1 R% addr_i [2] $end
$var wire 1 S% addr_i [1] $end
$var wire 1 T% addr_i [0] $end
$var wire 1 U% data_i [31] $end
$var wire 1 V% data_i [30] $end
$var wire 1 W% data_i [29] $end
$var wire 1 X% data_i [28] $end
$var wire 1 Y% data_i [27] $end
$var wire 1 Z% data_i [26] $end
$var wire 1 [% data_i [25] $end
$var wire 1 \% data_i [24] $end
$var wire 1 ]% data_i [23] $end
$var wire 1 ^% data_i [22] $end
$var wire 1 _% data_i [21] $end
$var wire 1 `% data_i [20] $end
$var wire 1 a% data_i [19] $end
$var wire 1 b% data_i [18] $end
$var wire 1 c% data_i [17] $end
$var wire 1 d% data_i [16] $end
$var wire 1 e% data_i [15] $end
$var wire 1 f% data_i [14] $end
$var wire 1 g% data_i [13] $end
$var wire 1 h% data_i [12] $end
$var wire 1 i% data_i [11] $end
$var wire 1 j% data_i [10] $end
$var wire 1 k% data_i [9] $end
$var wire 1 l% data_i [8] $end
$var wire 1 m% data_i [7] $end
$var wire 1 n% data_i [6] $end
$var wire 1 o% data_i [5] $end
$var wire 1 p% data_i [4] $end
$var wire 1 q% data_i [3] $end
$var wire 1 r% data_i [2] $end
$var wire 1 s% data_i [1] $end
$var wire 1 t% data_i [0] $end
$var wire 1 u% read_en_i $end
$var wire 1 v% write_en_i $end
$var reg 32 w% data_o [31:0] $end
$var reg 32 x% address [31:0] $end
$var integer 32 y% i $end
$upscope $end

$scope module u_alu $end
$var parameter 32 z% DWIDTH $end
$var parameter 32 {% AWIDTH $end
$var parameter 32 |% ZERO $end
$var parameter 32 }% INSN_NOP $end
$var parameter 32 ~% IMEM_BASE_ADDR $end
$var parameter 32 !& STACK_POINTER_INIT $end
$var parameter 7 "& OPCODE_OP $end
$var parameter 7 #& OPCODE_OP_IMM $end
$var parameter 7 $& OPCODE_LOAD $end
$var parameter 7 %& OPCODE_STORE $end
$var parameter 7 && OPCODE_BRANCH $end
$var parameter 7 '& OPCODE_JALR $end
$var parameter 7 (& OPCODE_JAL $end
$var parameter 7 )& OPCODE_LUI $end
$var parameter 7 *& OPCODE_AUIPC $end
$var parameter 7 +& OPCODE_SYSTEM $end
$var parameter 7 ,& OPCODE_MISC_MEM $end
$var parameter 3 -& FUNCT3_ADD_SUB $end
$var parameter 3 .& FUNCT3_SLL $end
$var parameter 3 /& FUNCT3_SLT $end
$var parameter 3 0& FUNCT3_SLTU $end
$var parameter 3 1& FUNCT3_XOR $end
$var parameter 3 2& FUNCT3_SR $end
$var parameter 3 3& FUNCT3_OR $end
$var parameter 3 4& FUNCT3_AND $end
$var parameter 4 5& ALU_OP_ADD $end
$var parameter 4 6& ALU_OP_SUB $end
$var parameter 4 7& ALU_OP_SLL $end
$var parameter 4 8& ALU_OP_SLT $end
$var parameter 4 9& ALU_OP_SLTU $end
$var parameter 4 :& ALU_OP_XOR $end
$var parameter 4 ;& ALU_OP_SRL $end
$var parameter 4 <& ALU_OP_SRA $end
$var parameter 4 =& ALU_OP_OR $end
$var parameter 4 >& ALU_OP_AND $end
$var parameter 4 ?& ALU_OP_COPY_B $end
$var parameter 2 @& WBSEL_ALU $end
$var parameter 2 A& WBSEL_MEM $end
$var parameter 2 B& WBSEL_PC4 $end
$var parameter 2 C& WBSEL_IMM $end
$var parameter 7 D& FUNCT7_DEFAULT $end
$var parameter 7 E& FUNCT7_SUB_SRA $end
$var wire 1 F& pc_i [31] $end
$var wire 1 G& pc_i [30] $end
$var wire 1 H& pc_i [29] $end
$var wire 1 I& pc_i [28] $end
$var wire 1 J& pc_i [27] $end
$var wire 1 K& pc_i [26] $end
$var wire 1 L& pc_i [25] $end
$var wire 1 M& pc_i [24] $end
$var wire 1 N& pc_i [23] $end
$var wire 1 O& pc_i [22] $end
$var wire 1 P& pc_i [21] $end
$var wire 1 Q& pc_i [20] $end
$var wire 1 R& pc_i [19] $end
$var wire 1 S& pc_i [18] $end
$var wire 1 T& pc_i [17] $end
$var wire 1 U& pc_i [16] $end
$var wire 1 V& pc_i [15] $end
$var wire 1 W& pc_i [14] $end
$var wire 1 X& pc_i [13] $end
$var wire 1 Y& pc_i [12] $end
$var wire 1 Z& pc_i [11] $end
$var wire 1 [& pc_i [10] $end
$var wire 1 \& pc_i [9] $end
$var wire 1 ]& pc_i [8] $end
$var wire 1 ^& pc_i [7] $end
$var wire 1 _& pc_i [6] $end
$var wire 1 `& pc_i [5] $end
$var wire 1 a& pc_i [4] $end
$var wire 1 b& pc_i [3] $end
$var wire 1 c& pc_i [2] $end
$var wire 1 d& pc_i [1] $end
$var wire 1 e& pc_i [0] $end
$var wire 1 f& rs1_i [31] $end
$var wire 1 g& rs1_i [30] $end
$var wire 1 h& rs1_i [29] $end
$var wire 1 i& rs1_i [28] $end
$var wire 1 j& rs1_i [27] $end
$var wire 1 k& rs1_i [26] $end
$var wire 1 l& rs1_i [25] $end
$var wire 1 m& rs1_i [24] $end
$var wire 1 n& rs1_i [23] $end
$var wire 1 o& rs1_i [22] $end
$var wire 1 p& rs1_i [21] $end
$var wire 1 q& rs1_i [20] $end
$var wire 1 r& rs1_i [19] $end
$var wire 1 s& rs1_i [18] $end
$var wire 1 t& rs1_i [17] $end
$var wire 1 u& rs1_i [16] $end
$var wire 1 v& rs1_i [15] $end
$var wire 1 w& rs1_i [14] $end
$var wire 1 x& rs1_i [13] $end
$var wire 1 y& rs1_i [12] $end
$var wire 1 z& rs1_i [11] $end
$var wire 1 {& rs1_i [10] $end
$var wire 1 |& rs1_i [9] $end
$var wire 1 }& rs1_i [8] $end
$var wire 1 ~& rs1_i [7] $end
$var wire 1 !' rs1_i [6] $end
$var wire 1 "' rs1_i [5] $end
$var wire 1 #' rs1_i [4] $end
$var wire 1 $' rs1_i [3] $end
$var wire 1 %' rs1_i [2] $end
$var wire 1 &' rs1_i [1] $end
$var wire 1 '' rs1_i [0] $end
$var wire 1 (' rs2_i [31] $end
$var wire 1 )' rs2_i [30] $end
$var wire 1 *' rs2_i [29] $end
$var wire 1 +' rs2_i [28] $end
$var wire 1 ,' rs2_i [27] $end
$var wire 1 -' rs2_i [26] $end
$var wire 1 .' rs2_i [25] $end
$var wire 1 /' rs2_i [24] $end
$var wire 1 0' rs2_i [23] $end
$var wire 1 1' rs2_i [22] $end
$var wire 1 2' rs2_i [21] $end
$var wire 1 3' rs2_i [20] $end
$var wire 1 4' rs2_i [19] $end
$var wire 1 5' rs2_i [18] $end
$var wire 1 6' rs2_i [17] $end
$var wire 1 7' rs2_i [16] $end
$var wire 1 8' rs2_i [15] $end
$var wire 1 9' rs2_i [14] $end
$var wire 1 :' rs2_i [13] $end
$var wire 1 ;' rs2_i [12] $end
$var wire 1 <' rs2_i [11] $end
$var wire 1 =' rs2_i [10] $end
$var wire 1 >' rs2_i [9] $end
$var wire 1 ?' rs2_i [8] $end
$var wire 1 @' rs2_i [7] $end
$var wire 1 A' rs2_i [6] $end
$var wire 1 B' rs2_i [5] $end
$var wire 1 C' rs2_i [4] $end
$var wire 1 D' rs2_i [3] $end
$var wire 1 E' rs2_i [2] $end
$var wire 1 F' rs2_i [1] $end
$var wire 1 G' rs2_i [0] $end
$var wire 1 H' imm_i [31] $end
$var wire 1 I' imm_i [30] $end
$var wire 1 J' imm_i [29] $end
$var wire 1 K' imm_i [28] $end
$var wire 1 L' imm_i [27] $end
$var wire 1 M' imm_i [26] $end
$var wire 1 N' imm_i [25] $end
$var wire 1 O' imm_i [24] $end
$var wire 1 P' imm_i [23] $end
$var wire 1 Q' imm_i [22] $end
$var wire 1 R' imm_i [21] $end
$var wire 1 S' imm_i [20] $end
$var wire 1 T' imm_i [19] $end
$var wire 1 U' imm_i [18] $end
$var wire 1 V' imm_i [17] $end
$var wire 1 W' imm_i [16] $end
$var wire 1 X' imm_i [15] $end
$var wire 1 Y' imm_i [14] $end
$var wire 1 Z' imm_i [13] $end
$var wire 1 [' imm_i [12] $end
$var wire 1 \' imm_i [11] $end
$var wire 1 ]' imm_i [10] $end
$var wire 1 ^' imm_i [9] $end
$var wire 1 _' imm_i [8] $end
$var wire 1 `' imm_i [7] $end
$var wire 1 a' imm_i [6] $end
$var wire 1 b' imm_i [5] $end
$var wire 1 c' imm_i [4] $end
$var wire 1 d' imm_i [3] $end
$var wire 1 e' imm_i [2] $end
$var wire 1 f' imm_i [1] $end
$var wire 1 g' imm_i [0] $end
$var wire 1 h' opcode_i [6] $end
$var wire 1 i' opcode_i [5] $end
$var wire 1 j' opcode_i [4] $end
$var wire 1 k' opcode_i [3] $end
$var wire 1 l' opcode_i [2] $end
$var wire 1 m' opcode_i [1] $end
$var wire 1 n' opcode_i [0] $end
$var wire 1 o' alusel_i [3] $end
$var wire 1 p' alusel_i [2] $end
$var wire 1 q' alusel_i [1] $end
$var wire 1 r' alusel_i [0] $end
$var wire 1 s' funct3_i [2] $end
$var wire 1 t' funct3_i [1] $end
$var wire 1 u' funct3_i [0] $end
$var wire 1 v' funct7_i [6] $end
$var wire 1 w' funct7_i [5] $end
$var wire 1 x' funct7_i [4] $end
$var wire 1 y' funct7_i [3] $end
$var wire 1 z' funct7_i [2] $end
$var wire 1 {' funct7_i [1] $end
$var wire 1 |' funct7_i [0] $end
$var reg 32 }' res_o [31:0] $end
$var reg 1 ~' brtaken_o $end
$var reg 32 !( operand_a [31:0] $end
$var reg 32 "( operand_b [31:0] $end
$var reg 32 #( result [31:0] $end
$var reg 5 $( shamt [4:0] $end
$var reg 1 %( breq $end
$var reg 1 &( brlt $end
$var reg 2 '( 3 [1:0] $end
$var reg 6 (( 2 [5:0] $end
$var reg 11 )( 1 [10:0] $end
$var reg 6 *( 0 [5:0] $end

$scope module u_branch_control $end
$var parameter 32 +( DWIDTH $end
$var parameter 32 ,( ZERO $end
$var parameter 32 -( INSN_NOP $end
$var parameter 32 .( IMEM_BASE_ADDR $end
$var parameter 32 /( STACK_POINTER_INIT $end
$var parameter 7 0( OPCODE_OP $end
$var parameter 7 1( OPCODE_OP_IMM $end
$var parameter 7 2( OPCODE_LOAD $end
$var parameter 7 3( OPCODE_STORE $end
$var parameter 7 4( OPCODE_BRANCH $end
$var parameter 7 5( OPCODE_JALR $end
$var parameter 7 6( OPCODE_JAL $end
$var parameter 7 7( OPCODE_LUI $end
$var parameter 7 8( OPCODE_AUIPC $end
$var parameter 7 9( OPCODE_SYSTEM $end
$var parameter 7 :( OPCODE_MISC_MEM $end
$var parameter 3 ;( FUNCT3_ADD_SUB $end
$var parameter 3 <( FUNCT3_SLL $end
$var parameter 3 =( FUNCT3_SLT $end
$var parameter 3 >( FUNCT3_SLTU $end
$var parameter 3 ?( FUNCT3_XOR $end
$var parameter 3 @( FUNCT3_SR $end
$var parameter 3 A( FUNCT3_OR $end
$var parameter 3 B( FUNCT3_AND $end
$var parameter 4 C( ALU_OP_ADD $end
$var parameter 4 D( ALU_OP_SUB $end
$var parameter 4 E( ALU_OP_SLL $end
$var parameter 4 F( ALU_OP_SLT $end
$var parameter 4 G( ALU_OP_SLTU $end
$var parameter 4 H( ALU_OP_XOR $end
$var parameter 4 I( ALU_OP_SRL $end
$var parameter 4 J( ALU_OP_SRA $end
$var parameter 4 K( ALU_OP_OR $end
$var parameter 4 L( ALU_OP_AND $end
$var parameter 4 M( ALU_OP_COPY_B $end
$var parameter 2 N( WBSEL_ALU $end
$var parameter 2 O( WBSEL_MEM $end
$var parameter 2 P( WBSEL_PC4 $end
$var parameter 2 Q( WBSEL_IMM $end
$var parameter 7 R( FUNCT7_DEFAULT $end
$var parameter 7 S( FUNCT7_SUB_SRA $end
$var wire 1 h' opcode_i [6] $end
$var wire 1 i' opcode_i [5] $end
$var wire 1 j' opcode_i [4] $end
$var wire 1 k' opcode_i [3] $end
$var wire 1 l' opcode_i [2] $end
$var wire 1 m' opcode_i [1] $end
$var wire 1 n' opcode_i [0] $end
$var wire 1 s' funct3_i [2] $end
$var wire 1 t' funct3_i [1] $end
$var wire 1 u' funct3_i [0] $end
$var wire 1 f& rs1_i [31] $end
$var wire 1 g& rs1_i [30] $end
$var wire 1 h& rs1_i [29] $end
$var wire 1 i& rs1_i [28] $end
$var wire 1 j& rs1_i [27] $end
$var wire 1 k& rs1_i [26] $end
$var wire 1 l& rs1_i [25] $end
$var wire 1 m& rs1_i [24] $end
$var wire 1 n& rs1_i [23] $end
$var wire 1 o& rs1_i [22] $end
$var wire 1 p& rs1_i [21] $end
$var wire 1 q& rs1_i [20] $end
$var wire 1 r& rs1_i [19] $end
$var wire 1 s& rs1_i [18] $end
$var wire 1 t& rs1_i [17] $end
$var wire 1 u& rs1_i [16] $end
$var wire 1 v& rs1_i [15] $end
$var wire 1 w& rs1_i [14] $end
$var wire 1 x& rs1_i [13] $end
$var wire 1 y& rs1_i [12] $end
$var wire 1 z& rs1_i [11] $end
$var wire 1 {& rs1_i [10] $end
$var wire 1 |& rs1_i [9] $end
$var wire 1 }& rs1_i [8] $end
$var wire 1 ~& rs1_i [7] $end
$var wire 1 !' rs1_i [6] $end
$var wire 1 "' rs1_i [5] $end
$var wire 1 #' rs1_i [4] $end
$var wire 1 $' rs1_i [3] $end
$var wire 1 %' rs1_i [2] $end
$var wire 1 &' rs1_i [1] $end
$var wire 1 '' rs1_i [0] $end
$var wire 1 (' rs2_i [31] $end
$var wire 1 )' rs2_i [30] $end
$var wire 1 *' rs2_i [29] $end
$var wire 1 +' rs2_i [28] $end
$var wire 1 ,' rs2_i [27] $end
$var wire 1 -' rs2_i [26] $end
$var wire 1 .' rs2_i [25] $end
$var wire 1 /' rs2_i [24] $end
$var wire 1 0' rs2_i [23] $end
$var wire 1 1' rs2_i [22] $end
$var wire 1 2' rs2_i [21] $end
$var wire 1 3' rs2_i [20] $end
$var wire 1 4' rs2_i [19] $end
$var wire 1 5' rs2_i [18] $end
$var wire 1 6' rs2_i [17] $end
$var wire 1 7' rs2_i [16] $end
$var wire 1 8' rs2_i [15] $end
$var wire 1 9' rs2_i [14] $end
$var wire 1 :' rs2_i [13] $end
$var wire 1 ;' rs2_i [12] $end
$var wire 1 <' rs2_i [11] $end
$var wire 1 =' rs2_i [10] $end
$var wire 1 >' rs2_i [9] $end
$var wire 1 ?' rs2_i [8] $end
$var wire 1 @' rs2_i [7] $end
$var wire 1 A' rs2_i [6] $end
$var wire 1 B' rs2_i [5] $end
$var wire 1 C' rs2_i [4] $end
$var wire 1 D' rs2_i [3] $end
$var wire 1 E' rs2_i [2] $end
$var wire 1 F' rs2_i [1] $end
$var wire 1 G' rs2_i [0] $end
$var reg 1 T( breq_o $end
$var reg 1 U( brlt_o $end
$var reg 32 V( rs1_signed [31:0] $end
$var reg 32 W( rs2_signed [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope begin genblk3 $end
$var integer 32 X( tick $end

$scope begin pre_check $end
$var integer 32 Y( res $end
$upscope $end

$scope begin tick_check $end
$var reg 1 Z( res $end
$var reg 1 [( tick_ok $end
$var reg 1 \( correct $end
$var reg 4096 ]( msg [4095:0] $end
$upscope $end

$scope task check_F $end
$var integer 32 ^( idx $end
$var reg 1 _( res $end
$var reg 4096 `( msg [4095:0] $end

$scope begin check_F_func $end
$var reg 32 a( pc [31:0] $end
$var reg 32 b( insn [31:0] $end
$var reg 128 c( p [127:0] $end
$upscope $end
$upscope $end

$scope task check_D $end
$var integer 32 d( idx $end
$var reg 1 e( res $end
$var reg 4096 f( msg [4095:0] $end

$scope begin check_D_func $end
$var reg 32 g( pc [31:0] $end
$var reg 7 h( opcode [6:0] $end
$var reg 5 i( rd [4:0] $end
$var reg 5 j( rs1 [4:0] $end
$var reg 5 k( rs2 [4:0] $end
$var reg 3 l( funct3 [2:0] $end
$var reg 7 m( funct7 [6:0] $end
$var reg 32 n( imm [31:0] $end
$var reg 5 o( shamt [4:0] $end
$var reg 128 p( p [127:0] $end
$var reg 224 q( t [223:0] $end
$upscope $end
$upscope $end

$scope task check_R $end
$var integer 32 r( idx $end
$var reg 1 s( res $end
$var reg 4096 t( msg [4095:0] $end

$scope begin check_R_func $end
$var reg 5 u( read_rs1 [4:0] $end
$var reg 5 v( read_rs2 [4:0] $end
$var reg 32 w( read_rs1_data [31:0] $end
$var reg 32 x( read_rs2_data [31:0] $end
$var reg 128 y( p [127:0] $end
$upscope $end
$upscope $end

$scope task check_E $end
$var integer 32 z( idx $end
$var reg 1 {( res $end
$var reg 4096 |( msg [4095:0] $end

$scope begin check_E_func $end
$var reg 32 }( pc [31:0] $end
$var reg 32 ~( alu_res [31:0] $end
$var reg 1 !) br_taken [0:0] $end
$var reg 128 ") p [127:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0#
x$
bx +
b0 ,
bx -
bx .
bx /
bx 0
bx 1
bx 2
bx 3
bx 4
bx 5
b0 6
07
08
09
0:
0;
0<
0=
b0 >
b0 ?
0@
bx A
b0 B
b0 C
bx D
bx E
bx F
bx G
0H
bx I
b0 J
b0 K
1L
0M
bx N
b0 O
bx P
0Q
0R
b0xxxxxxx00 S
bx T
0U
bx V
bx W
bx X
bx ~
b0 !!
bx "!
bx #!
b0 j!
bx k!
bx Q"
bx R"
bx S"
bx T"
bx U"
bx V"
bx W"
bx X"
bx Y"
b0 Z"
bx ["
bx \"
b0 ]"
b0 P#
b0 Q#
0O$
0P$
0Q$
0R$
0S$
0T$
0U$
b0 V$
b0 W$
bx X$
bx /%
bx 0%
b0 w%
bx x%
bx }'
0~'
bx !(
bx "(
bx #(
bx $(
0%(
0&(
0T(
0U(
bx V(
bx W(
1Z(
x[(
1\(
bx ](
1_(
bx `(
bx a(
bx b(
bx c(
1e(
bx f(
bx g(
bx h(
bx i(
bx j(
bx k(
bx l(
bx m(
bx n(
bx o(
bx p(
bx q(
1s(
bx t(
bx u(
bx v(
bx w(
bx x(
bx y(
1{(
bx |(
bx }(
bx ~(
bx !)
bx ")
b1000 Y
b0 R#
b0 Y$
bx Z$
bx [$
b0 '(
bx ((
b10000000000 )(
b0 *(
b100000 &
b100000 '
b1111111 (
b111 )
b1000000000000000000000000 *
b100000 Z
b100000 [
b1000000000000000000000000 \
b100000 $!
b100000 %!
b1000000000000000000000000 &!
b111111100 '!
b100000 m!
b100000 n!
b100000 ^"
b0 _"
b10011 `"
b1000000000000000000000000 a"
b1000100000000000000000000 b"
b110011 c"
b10011 d"
b11 e"
b100011 f"
b1100011 g"
b1100111 h"
b1101111 i"
b110111 j"
b10111 k"
b1110011 l"
b1111 m"
b0 n"
b1 o"
b10 p"
b11 q"
b100 r"
b101 s"
b110 t"
b111 u"
b0 v"
b1 w"
b10 x"
b11 y"
b100 z"
b101 {"
b110 |"
b111 }"
b1000 ~"
b1001 !#
b1010 "#
b0 ##
b1 $#
b10 %#
b11 &#
b0 '#
b100000 (#
b100000 S#
b0 T#
b10011 U#
b1000000000000000000000000 V#
b1000100000000000000000000 W#
b110011 X#
b10011 Y#
b11 Z#
b100011 [#
b1100011 \#
b1100111 ]#
b1101111 ^#
b110111 _#
b10111 `#
b1110011 a#
b1111 b#
b0 c#
b1 d#
b10 e#
b11 f#
b100 g#
b101 h#
b110 i#
b111 j#
b0 k#
b1 l#
b10 m#
b11 n#
b100 o#
b101 p#
b110 q#
b111 r#
b1000 s#
b1001 t#
b1010 u#
b0 v#
b1 w#
b10 x#
b11 y#
b0 z#
b100000 {#
b100000 \$
b100000 1%
b100000 2%
b1000000000000000000000000 3%
b111111100 4%
b100000 z%
b100000 {%
b0 |%
b10011 }%
b1000000000000000000000000 ~%
b1000100000000000000000000 !&
b110011 "&
b10011 #&
b11 $&
b100011 %&
b1100011 &&
b1100111 '&
b1101111 (&
b110111 )&
b10111 *&
b1110011 +&
b1111 ,&
b0 -&
b1 .&
b10 /&
b11 0&
b100 1&
b101 2&
b110 3&
b111 4&
b0 5&
b1 6&
b10 7&
b11 8&
b100 9&
b101 :&
b110 ;&
b111 <&
b1000 =&
b1001 >&
b1010 ?&
b0 @&
b1 A&
b10 B&
b11 C&
b0 D&
b100000 E&
b100000 +(
b0 ,(
b10011 -(
b1000000000000000000000000 .(
b1000100000000000000000000 /(
b110011 0(
b10011 1(
b11 2(
b100011 3(
b1100011 4(
b1100111 5(
b1101111 6(
b110111 7(
b10111 8(
b1110011 9(
b1111 :(
b0 ;(
b1 <(
b10 =(
b11 >(
b100 ?(
b101 @(
b110 A(
b111 B(
b0 C(
b1 D(
b10 E(
b11 F(
b100 G(
b101 H(
b110 I(
b111 J(
b1000 K(
b1001 L(
b1010 M(
b0 N(
b1 O(
b10 P(
b11 Q(
b0 R(
b100000 S(
b0 %
b1111111 l!
b1111111 y%
bx Y(
bx X(
bx ^(
bx d(
bx r(
bx z(
0!
x"
0]
x}
x|
x{
xz
xy
xx
xw
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
xf
xe
xd
xc
xb
xa
x`
x_
x^
xG!
xF!
xE!
xD!
xC!
xB!
xA!
x@!
x?!
x>!
x=!
x<!
x;!
x:!
x9!
x8!
x7!
x6!
x5!
x4!
x3!
x2!
x1!
x0!
x/!
x.!
x-!
x,!
x+!
x*!
x)!
x(!
0g!
0f!
0e!
0d!
0c!
0b!
0a!
0`!
0_!
0^!
0]!
0\!
0[!
0Z!
0Y!
0X!
0W!
0V!
0U!
0T!
0S!
0R!
0Q!
0P!
0O!
0N!
0M!
0L!
0K!
0J!
0I!
0H!
1h!
0i!
00"
0/"
0."
0-"
0,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~!
0}!
0|!
0{!
0z!
0y!
0x!
0w!
0v!
0u!
0t!
0s!
0r!
0q!
0p!
0o!
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
x@"
x?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
x1"
xO#
xN#
xM#
xL#
xK#
xJ#
xI#
xH#
xG#
xF#
xE#
xD#
xC#
xB#
xA#
x@#
x?#
x>#
x=#
x<#
x;#
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
x,#
x+#
x*#
x)#
x=$
x<$
x;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
x2$
x1$
x0$
x/$
x.$
x-$
x,$
x+$
x*$
x)$
x($
x'$
x&$
x%$
x$$
x#$
x"$
x!$
x~#
x}#
x|#
xD$
xC$
xB$
xA$
x@$
x?$
x>$
xK$
xJ$
xI$
xH$
xG$
xF$
xE$
xN$
xM$
xL$
0a$
0`$
0_$
0^$
0]$
0f$
0e$
0d$
0c$
0b$
xk$
xj$
xi$
xh$
xg$
x-%
x,%
x+%
x*%
x)%
x(%
x'%
x&%
x%%
x$%
x#%
x"%
x!%
x~$
x}$
x|$
x{$
xz$
xy$
xx$
xw$
xv$
xu$
xt$
xs$
xr$
xq$
xp$
xo$
xn$
xm$
xl$
0.%
xT%
xS%
xR%
xQ%
xP%
xO%
xN%
xM%
xL%
xK%
xJ%
xI%
xH%
xG%
xF%
xE%
xD%
xC%
xB%
xA%
x@%
x?%
x>%
x=%
x<%
x;%
x:%
x9%
x8%
x7%
x6%
x5%
xt%
xs%
xr%
xq%
xp%
xo%
xn%
xm%
xl%
xk%
xj%
xi%
xh%
xg%
xf%
xe%
xd%
xc%
xb%
xa%
x`%
x_%
x^%
x]%
x\%
x[%
xZ%
xY%
xX%
xW%
xV%
xU%
0u%
0v%
xe&
xd&
xc&
xb&
xa&
x`&
x_&
x^&
x]&
x\&
x[&
xZ&
xY&
xX&
xW&
xV&
xU&
xT&
xS&
xR&
xQ&
xP&
xO&
xN&
xM&
xL&
xK&
xJ&
xI&
xH&
xG&
xF&
x''
x&'
x%'
x$'
x#'
x"'
x!'
x~&
x}&
x|&
x{&
xz&
xy&
xx&
xw&
xv&
xu&
xt&
xs&
xr&
xq&
xp&
xo&
xn&
xm&
xl&
xk&
xj&
xi&
xh&
xg&
xf&
xG'
xF'
xE'
xD'
xC'
xB'
xA'
x@'
x?'
x>'
x='
x<'
x;'
x:'
x9'
x8'
x7'
x6'
x5'
x4'
x3'
x2'
x1'
x0'
x/'
x.'
x-'
x,'
x+'
x*'
x)'
x('
0g'
0f'
0e'
0d'
0c'
0b'
0a'
0`'
0_'
0^'
0]'
0\'
0['
0Z'
0Y'
0X'
0W'
0V'
0U'
0T'
0S'
0R'
0Q'
0P'
0O'
0N'
0M'
0L'
0K'
0J'
0I'
0H'
xn'
xm'
xl'
xk'
xj'
xi'
xh'
0r'
0q'
0p'
0o'
xu'
xt'
xs'
x|'
x{'
xz'
xy'
xx'
xw'
xv'
$end
#1
1#
1!
b0 \"
b1 %
1$
b0 /%
b0 0%
b0 R"
b0 S"
b0 T"
b0 X"
b0 U"
b0 V"
b0 Y"
b0 W"
0O#
0N#
0M#
0L#
0K#
0J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
0<#
0;#
0:#
09#
08#
07#
06#
05#
04#
03#
02#
01#
00#
1"
b0 3
b0 5
b0 2
b0 1
b0 4
b0 0
b0 /
b0 .
b0 E
b0 D
b0 P
b0 A
0=$
0<$
0;$
0:$
09$
08$
07$
06$
05$
04$
03$
02$
01$
00$
0/$
0.$
0-$
0,$
0+$
0*$
0)$
0($
0'$
0&$
0%$
0$$
0#$
0"$
0!$
0~#
0}#
0|#
0|'
0{'
0z'
0y'
0x'
0w'
0v'
b0 X$
0k$
0j$
0i$
0h$
0g$
0t%
0s%
0r%
0q%
0p%
0o%
0n%
0m%
0l%
0k%
0j%
0i%
0h%
0g%
0f%
0e%
0d%
0c%
0b%
0a%
0`%
0_%
0^%
0]%
0\%
0[%
0Z%
0Y%
0X%
0W%
0V%
0U%
0''
0&'
0%'
0$'
0#'
0"'
0!'
0~&
0}&
0|&
0{&
0z&
0y&
0x&
0w&
0v&
0u&
0t&
0s&
0r&
0q&
0p&
0o&
0n&
0m&
0l&
0k&
0j&
0i&
0h&
0g&
0f&
0G'
0F'
0E'
0D'
0C'
0B'
0A'
0@'
0?'
0>'
0='
0<'
0;'
0:'
09'
08'
07'
06'
05'
04'
03'
02'
01'
00'
0/'
0.'
0-'
0,'
0+'
0*'
0)'
0('
0D$
0C$
0B$
0A$
0@$
0?$
0>$
0n'
0m'
0l'
0k'
0j'
0i'
0h'
0N$
0M$
0L$
0u'
0t'
0s'
0K$
0J$
0I$
0H$
0G$
0F$
0E$
0/#
0.#
0-#
0,#
0+#
0*#
0)#
b0 W(
b0 V(
b0 #(
bx #(
b0 !(
b0 "(
b0 $(
b0 #(
b0 }'
b0 G
b0 T
b0 X
b0 S
b1000000000000000000000000 N
0T%
0S%
0R%
0Q%
0P%
0O%
0N%
0M%
0L%
0K%
0J%
0I%
0H%
0G%
0F%
0E%
0D%
0C%
0B%
0A%
0@%
0?%
0>%
0=%
1<%
0;%
0:%
09%
08%
07%
06%
05%
0}
0|
0{
0z
0y
0x
0w
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0f
0e
0d
0c
0b
0a
0`
0_
0^
b0 x%
b0 F
0-%
0,%
0+%
0*%
0)%
0(%
0'%
0&%
0%%
0$%
0#%
0"%
0!%
0~$
0}$
0|$
0{$
0z$
0y$
0x$
0w$
0v$
0u$
0t$
0s$
0r$
0q$
0p$
0o$
0n$
0m$
0l$
#2
0#
0!
b0 X(
#3
1#
1!
b1000000000000000000000000 #!
b0 ["
b10011 \"
b10 %
b10011 R"
b10011 S"
b0 Q"
b1000000000000000000000000 ~
1O#
1N#
1K#
b1000000000000000000000000 +
b0 -
b10011 /
b10011 .
b100 V
b1000000000000000000000000 I
1=$
1<$
19$
0P"
0O"
0N"
0M"
0L"
0K"
0J"
0I"
0H"
0G"
0F"
0E"
0D"
0C"
0B"
0A"
0@"
0?"
0>"
0="
0<"
0;"
0:"
09"
18"
07"
06"
05"
04"
03"
02"
01"
b100 W
0G!
0F!
0E!
0D!
0C!
0B!
0A!
0@!
0?!
0>!
0=!
0<!
0;!
0:!
09!
08!
07!
06!
05!
04!
03!
02!
01!
00!
1/!
0.!
0-!
0,!
0+!
0*!
0)!
0(!
1D$
1C$
1@$
1n'
1m'
1j'
0e&
0d&
0c&
0b&
0a&
0`&
0_&
0^&
0]&
0\&
0[&
0Z&
0Y&
0X&
0W&
0V&
0U&
0T&
0S&
0R&
0Q&
0P&
0O&
0N&
0M&
0L&
0K&
0J&
0I&
0H&
0G&
0F&
1/#
1.#
1+#
b0 k!
b100 R#
b10 *(
b100 Y$
1Q$
1P$
1R$
b10000000 [$
b11111101000000010000000100010011 j!
b1000000000000000000000100 "!
b11111101000000010000000100010011 J
1:
18
19
1@
b11111101000000010000000100010011 ,
1.%
10"
1/"
1,"
1("
1~!
1v!
1t!
1s!
1r!
1q!
1p!
1o!
#4
0#
0!
#5
1#
1!
b11 %
#6
0#
0!
#7
1#
1!
b100 %
#8
0#
0!
#9
1#
1!
b101 %
#10
0#
0!
#11
1#
1!
b110 %
0$
0"
#12
0#
0!
b0 ^(
b1111110100000001000000010001001100000001000000000000000000000000 c(
b1000000000000000000000000 a(
b11111101000000010000000100010011 b(
b0 d(
b111111111111111111111111110100000000000000000000001000010001001100000001000000000000000000000000 p(
b1000000000000000000000000 g(
b10011 h(
b10 i(
b10 j(
b0 k(
b0 l(
b0 m(
b11111111111111111111111111010000 n(
bf(
0e(
0Z(
b
0\(
b0 r(
b10001000000000000000000000000000010 y(
b10 u(
b10 v(
b1000000000000000000000000000010 w(
b1000000000000000000000000000010 x(
b10100100010000001110011011101000110000101100111011001010010000001101101011010010111001101101101011000010111010001100011011010000011101000100000011001010111100001110000011001010110001101110100011001010110010000100000010100100100010101000001010001000101111101010010010100110011000100111101001100000011001000101100001000000101001001000101010000010100010001011111010100100101001100110010001111010011000000110010001011000010000001010010010001010100000101000100010111110101001001010011001100010101111101000100010000010101010001000001001111010011010000110000001100000011000000110000001100000011000000110010001011000010000001010010010001010100000101000100010111110101001001010011001100100101111101000100010000010101010001000001001111010011010000110000001100000011000000110000001100000011000000110010001011000010000001100111011011110111010000100000010100100100010101000001010001000101111101010010010100110011000100111101001100000011000000101100001000000101001001000101010000010100010001011111010100100101001100110010001111010011000000110000001011000010000001010010010001010100000101000100010111110101001001010011001100010101111101000100010000010101010001000001001111010011000000110000001100000011000000110000001100000011000000110000001011000010000001010010010001010100000101000100010111110101001001010011001100100101111101000100010000010101010001000001001111010011000000110000001100000011000000110000001100000011000000110000 t(
0s(
b10100100010000001110011011101000110000101100111011001010010000001101101011010010111001101101101011000010111010001100011011010000011101000100000011001010111100001110000011001010110001101110100011001010110010000100000010100100100010101000001010001000101111101010010010100110011000100111101001100000011001000101100001000000101001001000101010000010100010001011111010100100101001100110010001111010011000000110010001011000010000001010010010001010100000101000100010111110101001001010011001100010101111101000100010000010101010001000001001111010011010000110000001100000011000000110000001100000011000000110010001011000010000001010010010001010100000101000100010111110101001001010011001100100101111101000100010000010101010001000001001111010011010000110000001100000011000000110000001100000011000000110010001011000010000001100111011011110111010000100000010100100100010101000001010001000101111101010010010100110011000100111101001100000011000000101100001000000101001001000101010000010100010001011111010100100101001100110010001111010011000000110000001011000010000001010010010001010100000101000100010111110101001001010011001100010101111101000100010000010101010001000001001111010011000000110000001100000011000000110000001100000011000000110000001011000010000001010010010001010100000101000100010111110101001001010011001100100101111101000100010000010101010001000001001111010011000000110000001100000011000000110000001100000011000000110000 ](
b0 z(
b100001111111111111101000000000001000000000000000000000000 ")
b1000000000000000000000000 }(
b1000000000000000000000000 ~(
b0 !)
b|(
0{(
b
